################################################
#  GITHUB ACTION WORKFLOW NAME
################################################
name: Release to Staging environment



################################################
#  GITHUB ACTION EVENT TRIGGER
################################################
on:
  workflow_dispatch:
  push:
    # branches: [ 'trunk' ]
    branches: [ 'develop' ]
    


################################################
#  GITHUB ACTION JOBS
################################################
jobs:
  release-stage:
    name: release-stage
    runs-on: ubuntu-latest



################################################
#  GITHUB ACTIONS GLOBAL ENV VARIABLES  
################################################
    env:
      REGION : ap-southeast-2
      ENV : stage # Valid values are sandbox,stage,live only
      STACK_NAME: beta # Valid values are au,us,uk,p2,lf,nu,alpha,beta,shared only
      SUBDOMAIN: devops-ecs
      CFNS3BucketName: devops-cfn-templates1



################################################
#  GITHUB REPO CHECKOUT 
################################################
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis


################################################
#  PYTHON ENV  
################################################
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8


################################################
#  PYTHON MODULES CACHE  
################################################
      - name: Cache Python dependencies
        uses: actions/cache@v2
        id: cache-python
        with:
          path: ${{ env.pythonLocation}}/lib/python3.8/site-packages/*
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-


################################################
#  PYTHON MODULES INSTALL  
################################################
      - name: Install Python dependencies
        if: steps.cache-python.outputs.cache-hit != 'true'
        run: |
          echo "Installing dependencies and caching them."
          pip install -r requirements.txt


################################################
#  NODE ENV
################################################    
      - name: Setup Node.js environment
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      

################################################
#  NODE MODULES CACHE  
################################################
      - name: Cache node modules
        uses: actions/cache@v2
        id: cache-node-modules
        env:
          cache-name: cache
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


################################################
#  NODE MODULES INSTALL  
################################################
      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run:  npm install


################################################
#  CLOUDFORMATION LINT ANALYSIS TEST 
################################################
      # - name: Run cloudformation template Lint analysis test using cfn-lint
      #   uses: docker://ghcr.io/scottbrenner/cfn-lint-action:master
          

################################################
#  CLOUDFORMATION STATIC ANALYSIS TEST  
################################################
      # - name: Run cloudformation template static analysis test using cfn-nag
      #   uses: stelligent/cfn_nag@master
      #   with:
      #     input_path: cfn-templates
      #     extra_args: --fail-on-warnings -o json --blacklist-path .cfn_nag_blacklist.yml


################################################
#  AWS CLI CONFIGURATION  
################################################ 
      - name: Configure AWS credentials from $STACK_NAME account in $REGION region
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEVOPS_AWS_KEY }}
          aws-secret-access-key: ${{ secrets.DEVOPS_SECRET_KEY }}
          aws-region: ${{ env.REGION }}



####################################################
#  CLOUDFORMATION ADDITIONAL TAG; KEY=VALUE FORMAT
####################################################      
      - name: Create additional cloudformation tags for stack deployment
        run: |
          cat >> config/cfn.tags <<EOF 
          StackName=$STACK_NAME
          Env=$ENV
          RootStack=$SUBDOMAIN
          EOF
         

################################################
#  CLOUDFORMATION ADDITIONAL TAG FORMATTING 
################################################ 
      - name: Convert JSON format cloudformation tags for stack deployment
        run: |
          python3 scripts/cfn-param-json-convert.py config/cfn.tags


##############################################################
#  CLOUDFORMATION EXPORT VARIABLES
###############################################################      
      - name: Export cloudformation variables
        run: |
          export APPCERTARN=${{ env.STACK_NAME }}-APPSharedACMCertificateArn-${{ env.ENV }}
          echo "APPCERTARN="$(aws cloudformation list-exports --query "Exports[?Name==\`$APPCERTARN\`].Value" --no-paginate --output text) >> $GITHUB_ENV


#############################################################################
#  CLOUDFORMATION ADDITIONAL PARAMETERS (SECRETS INCLUDED); KEY=VALUE FORMAT
#############################################################################
      - name: Create additional cloudformation parameters for stack deployment
        run: |
          cat >> config/cfn.params <<EOF 
          StackName=$STACK_NAME
          Env=$ENV
          CFNS3BucketName=$CFNS3BucketName
          CFNS3BucketRegion=ap-southeast-2
          KeyName=$STACK_NAME-$REGION
          LoadBalancerCertificateArn=$APPCERTARN
          
          EOF
      

##########################################################
#  CLOUDFORMATION ADDITIONAL PARAMETERS FORMATTING
########################################################## 
      - name: Convert JSON format cloudformation parameters for stack deployment
        run: |
          python3 scripts/cfn-param-json-convert.py config/cfn.params



##########################################################
#  AWS S3 SYNC - CLOUDFORMATION TEMPLATES 
##########################################################
      - name: AWS S3 Sync operation
        run: |
          aws s3 sync cfn-templates/ s3://$CFNS3BucketName/$STACK_NAME/$REGION/cfn-templates --delete



##########################################################
#  CLOUDFORMATION DEPLOYMENT
########################################################## 
      - name: Create or Update cloudformation templates from $STACK_NAME AWS account in $REGION region
        run: |
          python3 scripts/cfn-deploy.py $STACK_NAME-$SUBDOMAIN-$ENV cfn-templates/main.yml config/cfn-params.json config/cfn-tags.json
         


########################################################################
#  SERVERLESS REDIS PROGRESS CACHE FOR ADMIN- SCHEDULED every 1 hour
########################################################################
      - name: Serverless redis-progress-cache service
        run: |
          cp serverless-redis-cache.yml serverless.yml
          node_modules/.bin/serverless package --package artifacts/${{ env.ENV }} --stage ${{ env.ENV }} --region ${{ env.REGION }} -v
          node_modules/.bin/serverless deploy --stage ${{ env.ENV }} --region ${{ env.REGION }} --package artifacts/${{ env.ENV }} -v
          rm serverless.yml



##########################################################
#  SLACK NOTIFICATION
##########################################################       
      - name: Slack Notification
        if: always() # Pick up events even if the job fails or is canceled.
        uses: 8398a7/action-slack@v3
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }} # required
        with:
          status: ${{ job.status }}
          author_name: ${{ env.SUBDOMAIN }} deployed to ${{ env.ENV }} environemnt in ${{ env.STACK_NAME }} AWS account
          mention: 'here'
          if_mention: failure,cancelled
          job_name: centralized # Match the name above.
          fields: repo,commit,eventName,ref,workflow,message,author,job,took
          custom_payload: |
            {
            username: 'GitHub Action CI WorkFlow',
            icon_emoji: ':github:',
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : ${{ job.status }}' === 'failure' ? 'danger' : 'warning',
              text:
             `${process.env.AS_REPO}\n
              ${process.env.AS_COMMIT}\n
              ${process.env.AS_EVENT_NAME}\n
              @${process.env.AS_REF}\n
              @${process.env.AS_WORKFLOW}\n
              ${process.env.AS_MESSAGE}\n
              ${process.env.AS_AUTHOR}\n
              ${process.env.AS_JOB}\n
              ${process.env.AS_TOOK}`,
            }]
            }