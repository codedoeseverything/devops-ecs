
AWSTemplateFormatVersion: '2010-09-09'
Description: This is ECS task defination cloudformation template for core Practera Admin infrastructure
  design

Metadata:
  Authors:
    Description: Sunil and Mihai (sunil@practera.com/mihai@practera.com) based on
      AWS quickstart/widdix and best practise.
  License:
    Description: Copyright 2020 Intersective PTY LTD and its affiliates. All Rights
      Reserved.

Parameters:
  StackName:
    ConstraintDescription: This will be unique string to represent our stack.
    Default: beta
    Description: A client/project/product unique name for the stack to idnetify later.
      This string can include numbers, lowercase letters, uppercase letters, and hyphens
      (-). It cannot start or end with a hyphen (-).
    Type: String
    AllowedValues: [au,us,uk,p2,lf,nu,alpha,beta,shared]
  Env:
    Description: Environment type.
    Default: stage
    Type: String
    AllowedValues:
      - sandbox
      - stage
      - live
    ConstraintDescription: must specify sandbox,stage,live.
  PrimaryImage:
    Description: 'The image to use for a container, which is passed directly to the Docker daemon. You can use images in the Docker Hub registry or specify other repositories (repository-url/image:tag).'
    Type: String
    Default: nginx
  BranchName:
    Description: The branch that needs to be deployed
    Type: String
    Default: 'release/florina'
  MailingServer:
    Type: String
    Description: What should be used to send emails
    AllowedValues: [mailtrap,smtp]
  Hostname:
    Description: The URI for the hostname for the images
    Type: String
    Default: 'admin.local'

Resources:

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'  
        - PolicyName: secretmanager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'secretsmanager:GetSecretValue'
              - 'ssm:GetParameters'
              - 'kms:Decrypt'
              Resource: '*'


  TaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${StackName}-admin-td-${Env}'
      Family: !Sub '${StackName}-admin-td-${Env}'
      ExecutionRoleArn: {"Fn::GetAtt" : ["ECSTaskExecutionRole", "Arn"] }
      NetworkMode: bridge
      ContainerDefinitions:
      - Name: !Sub '${StackName}-admin-container-def-${Env}' # if you change this, you also must change the AWS::ECS::Service
        Image: !Ref PrimaryImage
        Memory: 128
        PortMappings:
        - ContainerPort: 80 # if you change this, you also must change the AWS::ECS::Service
          Protocol: tcp
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            'awslogs-region': !Ref 'AWS::Region'
            'awslogs-group': {'Fn::ImportValue': !Sub '${StackName}-admin-cluster-log-group-${Env}'}
            'awslogs-stream-prefix': !Ref 'AWS::StackName'
        # #Added
        # Command: 
        # - "/sbin/my_init"
        # # MemoryReservation: 256
        # ReadonlyRootFilesystem: false
        # Hostname: !Ref Hostname
        # ExtraHosts:
        # - Hostname: local.practera.com
        #   IpAddress: "127.0.0.1"

        # Secrets:
        # - Name: PRACTERA_AUTHY
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-AuthySecret-${Env}'} 
        # - Name: PRACTERA_DATABASE
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-CoreDBSecret-${Env}'}
        # - Name: PRACTERA_APPKEY
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-AppKeySecret-${Env}'}
        # - Name: PRACTERA_TWILIO
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-TwilioSecret-${Env}'}
        # - Name: PRACTERA_FILESTACK
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-FilestackSecret-${Env}'}
        # - Name: PRACTERA_JWT
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-JwtSecret-${Env}'}
        # - Name: PRACTERA_JWTPUB
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-JwtPubSecret-${Env}'}
        # - Name: PRACTERA_MAILTRAP
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-MailtrapSecret-${Env}'}
        # - Name: PRACTERA_MANDRILL
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-MandrillSecret-${Env}'}
        # - Name: PRACTERA_NEWRELIC
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-NewrelicSecret-${Env}'}
        # - Name: PRACTERA_PUSHER
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-PusherSecret-${Env}'}
        # - Name: PRACTERA_S3
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-S3Secret-${Env}'}
        # - Name: PRACTERA_INTERCOM
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-IntercomSecret-${Env}'}
        # - Name: PRACTERA_LOGIN_SECRETS
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-LoginCoreSecrets-${Env}'}
        # - Name: PRACTERA_CUTIE
        #   ValueFrom: {'Fn::ImportValue': !Sub '${StackName}-CutieAppUrl-${Env}'}

        # Environment:
        # - Name: PRACTERA_BRANCH
        #   Value: !Ref BranchName
        # - Name: PRACTERA_EMAIL
        #   Value: !Ref MailingServer
        # - Name: PRACTERA_DB_HOST
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-Route53DBEndpoint-${Env}'} 
        # - Name: PRACTERA_DB_HOST_WRITE
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-Route53DBEndpoint-${Env}'} 
        # - Name: PRACTERA_DB_HOST_READ
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-Route53DBEndpoint-${Env}'} 
        # - Name: PRACTERA_DB_NAME
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-DBNAME-${Env}'} #TODO
        # # - Name: PRACTERA_DB_LOGS_NAME
        # #   Value: !Ref LogsDatabaseName
        # - Name: PRACTERA_DOMAIN
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-PublicHostedZoneName-${Env}'}
        # - Name: PRACTERA_URL
        #   Value: !Join [ '', [ 'https://', {'Fn::ImportValue': !Sub '${StackName}-PublicHostedZoneName-${Env}'} ] ]
        # - Name: PRACTERA_ENV
        #   Value: !Ref Env
        # - Name: PRACTERA_REDIS_HOST
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-Route53RecordRedis-${Env}'} 
        # - Name: PRACTERA_REDIS_QUEUE_HOST
        #   Value: {'Fn::ImportValue': !Sub '${StackName}-Route53RecordRedis-${Env}'}
        # - Name: PRACTERA_GLOBAL_LOGIN_URL
        #   Value: "NA" #TODO
        # - Name: MIGRATION_URL
        #   Value: "NA" #TODO
        # - Name: MESSAGING_URL
        #   Value: "NA" #TODO



Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'

  TaskDefinition:
    Description: 'Admin TaskDefinition'
    Value: !Ref TaskDefinition
    Export:
      Name: !Sub '${StackName}-admin-td-${Env}'

  ECSTaskExecutionRole:
    Description: 'Admin TaskDefinition'
    Value: {"Fn::GetAtt" : ["ECSTaskExecutionRole", "Arn"] }
    Export:
      Name: !Sub '${StackName}-ECSTaskExecutionRole-${Env}'